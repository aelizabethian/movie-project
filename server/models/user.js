const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Movie = require('../models/movie');
var crypto = require('crypto');

// Define our model
const UserSchema = new Schema({
  email: { type: String, unique: true, lowercase: true },
  hash: String,
  salt: String,
  watchList: [{ type: Movie.MovieSchema }]
});

//NOTE DEFINITION OF SALT AND HASH
// a salt is a value generated by a cryptographically secure function that is added to the input of hash functions to create unique hashes for every input, regardless of the input not being unique. A salt makes a hash function look non-deterministic, which is good as we don't want to reveal duplicate passwords through our hashing.
//Note below that crypto is a module included in node. The way it is written below is CJS way. There is a more modern way to write it where you can skip using 'crypto.' Check out https://nodejs.org/api/crypto.html#crypto

UserSchema.methods.setPassword = function(password){

  //The crypto.randomBytes() method is used to generate a cryptographically well-built artificial random data and the number of bytes to be generated in the written code.
  this.salt = crypto.randomBytes(16).toString('hex');
 // The crypto.pbkdf2Sync() method gives an asynchronous Password-Based Key Derivation Function 2 i.e, (PBKDF2) implementation. Moreover, a particular HMAC digest algorithm which is defined by digest is implemented to derive a key of the required byte length (keylen) from the stated password, salt, and iterations.
 //Takes the form crypto.pbkdf2Sync( password, salt, iterations, keylen, digest )
 //keylen: It is the key of the required byte length and it is of type number.
//digest: It is a digest algorithms of string type.
  this.hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64, 'sha512').toString('hex');
};

UserSchema.methods.validPassword = function(password) {
  var hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64, 'sha512').toString('hex');

  return this.hash === hash;
};

const UserModel = mongoose.model('user', UserSchema);

module.exports = UserModel;